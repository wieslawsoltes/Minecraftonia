name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            zip_name: Minecraftonia-linux-x64.zip
          - os: macos-latest
            rid: osx-arm64
            zip_name: Minecraftonia-macos-arm64.zip
          - os: windows-latest
            rid: win-x64
            zip_name: Minecraftonia-windows-x64.zip
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: Minecraftonia
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore
        run: dotnet restore Minecraftonia.sln

      - name: Build solution
        run: dotnet build Minecraftonia.sln

      - name: Build sample app
        run: dotnet build samples/Minecraftonia.Sample.BasicBlock/Minecraftonia.Sample.BasicBlock.csproj -c Release

      - name: Publish
        run: dotnet publish Minecraftonia/Minecraftonia.csproj -c Release -r ${{ matrix.rid }} --self-contained true -o publish/${{ matrix.rid }}

      - name: Remove debug artifacts
        shell: bash
        run: |
          find publish/${{ matrix.rid }} -name '*.dSYM' -prune -exec rm -rf {} +
          find publish/${{ matrix.rid }} -type f \( -name '*.pdb' -o -name '*.pdf' -o -name '*.dsym' -o -name '*.dbg' \) -delete

      - name: Strip binaries (macOS)
        if: runner.os == 'macOS'
        run: |
          bin_dir="publish/${{ matrix.rid }}"
          if [ -f "$bin_dir/${{ env.APP_NAME }}" ]; then
            strip -x "$bin_dir/${{ env.APP_NAME }}"
          fi
          while IFS= read -r lib; do
            strip -x "$lib"
          done < <(find "$bin_dir" -type f -name '*.dylib')

      - name: Strip binaries (Linux)
        if: runner.os == 'Linux'
        run: |
          bin_dir="publish/${{ matrix.rid }}"
          if [ -f "$bin_dir/${{ env.APP_NAME }}" ]; then
            strip --strip-unneeded "$bin_dir/${{ env.APP_NAME }}"
          fi
          while IFS= read -r lib; do
            strip --strip-unneeded "$lib"
          done < <(find "$bin_dir" -type f -name '*.so')

      - name: Archive build
        if: runner.os != 'Windows'
        run: |
          cd publish/${{ matrix.rid }}
          zip -r ../${{ matrix.zip_name }} .

      - name: Archive build (Windows)
        if: runner.os == 'Windows'
        run: |
          cd publish/${{ matrix.rid }}
          Compress-Archive -Path * -DestinationPath ../${{ matrix.zip_name }}
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: publish/${{ matrix.zip_name }}
          if-no-files-found: error

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*.zip
          name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
